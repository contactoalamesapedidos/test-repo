<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debug Notificaciones Push - A la Mesa</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background-color: #f8f9fa; }
        .debug-card { margin-bottom: 1rem; }
        .log-output {
            background-color: #000;
            color: #0f0;
            font-family: 'Courier New', monospace;
            padding: 1rem;
            border-radius: 0.375rem;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
        .btn-test { margin: 0.25rem; }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }
        .status-success { background-color: #198754; }
        .status-error { background-color: #dc3545; }
        .status-warning { background-color: #ffc107; }
        .status-info { background-color: #0dcaf0; }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h1 class="h3 mb-0">
                            <i class="fas fa-bug text-primary me-2"></i>
                            Debug Notificaciones Push - A la Mesa
                        </h1>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">
                            Esta herramienta te ayuda a diagnosticar problemas con las notificaciones push.
                            Ejecuta las pruebas paso a paso para identificar d√≥nde est√° el problema.
                        </p>

                        <!-- Estado General -->
                        <div class="card debug-card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <span class="status-indicator status-info"></span>
                                    Estado General del Sistema
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <div id="sw-status" class="status-indicator status-warning"></div>
                                            <small>Service Worker</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <div id="permission-status" class="status-indicator status-warning"></div>
                                            <small>Permisos</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <div id="subscription-status" class="status-indicator status-warning"></div>
                                            <small>Suscripci√≥n</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center">
                                            <div id="vapid-status" class="status-indicator status-warning"></div>
                                            <small>VAPID</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Botones de Prueba -->
                        <div class="card debug-card">
                            <div class="card-header">
                                <h5 class="mb-0">Pruebas Disponibles</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <button id="btn-step-by-step" class="btn btn-primary btn-test w-100">
                                            <i class="fas fa-route me-2"></i>
                                            Prueba Paso a Paso (Recomendado)
                                        </button>
                                    </div>
                                    <div class="col-md-6">
                                        <button id="btn-diagnose" class="btn btn-info btn-test w-100">
                                            <i class="fas fa-stethoscope me-2"></i>
                                            Diagn√≥stico Completo
                                        </button>
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-md-6">
                                        <button id="btn-test-server" class="btn btn-success btn-test w-100">
                                            <i class="fas fa-server me-2"></i>
                                            Probar Env√≠o Servidor
                                        </button>
                                    </div>
                                    <div class="col-md-6">
                                        <button id="btn-test-local" class="btn btn-warning btn-test w-100">
                                            <i class="fas fa-desktop me-2"></i>
                                            Probar Notificaci√≥n Local
                                        </button>
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-md-6">
                                        <button id="btn-check-db" class="btn btn-secondary btn-test w-100">
                                            <i class="fas fa-database me-2"></i>
                                            Ver BD
                                        </button>
                                    </div>
                                    <div class="col-md-6">
                                        <button id="btn-clear-logs" class="btn btn-danger btn-test w-100">
                                            <i class="fas fa-trash me-2"></i>
                                            Limpiar Logs
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Output de Logs -->
                        <div class="card debug-card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Logs de Ejecuci√≥n</h5>
                                <small class="text-muted">Los resultados aparecen aqu√≠</small>
                            </div>
                            <div class="card-body">
                                <div id="log-output" class="log-output">
üß™ === PRUEBA DE NOTIFICACIONES PUSH ===

¬°Bienvenido al debug de notificaciones push!
Haz clic en "Prueba Paso a Paso" para comenzar el diagn√≥stico.
                                </div>
                            </div>
                        </div>

                        <!-- Informaci√≥n de Troubleshooting -->
                        <div class="card debug-card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="fas fa-question-circle text-info me-2"></i>
                                    Soluci√≥n de Problemas
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="accordion" id="troubleshootingAccordion">
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne">
                                                Error: "Registration failed - permission denied"
                                            </button>
                                        </h2>
                                        <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#troubleshootingAccordion">
                                            <div class="accordion-body">
                                                <p>Este error ocurre cuando el navegador bloquea el registro del Service Worker.</p>
                                                <ul>
                                                    <li>‚úÖ Verifica que est√©s en HTTPS (no HTTP)</li>
                                                    <li>üßπ Limpia cookies y datos del sitio</li>
                                                    <li>üîÑ Reinicia el navegador</li>
                                                    <li>üö´ Desactiva extensiones que bloqueen notificaciones</li>
                                                    <li>üïµÔ∏è Prueba en modo inc√≥gnito</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo">
                                                Permisos cambian autom√°ticamente a "denied"
                                            </button>
                                        </h2>
                                        <div id="accordion-collapse collapse" data-bs-parent="#troubleshootingAccordion">
                                            <div class="accordion-body">
                                                <p>El navegador est√° revocando autom√°ticamente los permisos concedidos.</p>
                                                <ul>
                                                    <li>üîí Verifica que el sitio est√© en HTTPS</li>
                                                    <li>üßπ Limpia datos del sitio completamente</li>
                                                    <li>‚öôÔ∏è Revisa configuraci√≥n de notificaciones del navegador</li>
                                                    <li>üö´ Verifica que no haya pol√≠ticas de seguridad bloqueando</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree">
                                                Notificaciones no llegan despu√©s de pedidos
                                            </button>
                                        </h2>
                                        <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#troubleshootingAccordion">
                                            <div class="accordion-body">
                                                <p>Las notificaciones se env√≠an pero no llegan al navegador.</p>
                                                <ul>
                                                    <li>üì± Verifica que el usuario tenga suscripci√≥n activa</li>
                                                    <li>üóÑÔ∏è Revisa que las suscripciones est√©n guardadas en BD</li>
                                                    <li>üîë Verifica configuraci√≥n VAPID</li>
                                                    <li>üåê Comprueba conectividad a internet</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Script de pruebas -->
    <script>
        // Variables globales
        let originalConsoleLog = console.log;
        let originalConsoleError = console.error;
        let originalConsoleWarn = console.warn;
        let logOutput = document.getElementById('log-output');

        // Funci√≥n para agregar logs al output
        function addToLog(message, type = 'log') {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = `[${timestamp}] ${message}\n`;
            logOutput.textContent += logEntry;
            logOutput.scrollTop = logOutput.scrollHeight;

            // Llamar a la funci√≥n original tambi√©n
            if (type === 'log') originalConsoleLog(message);
            else if (type === 'error') originalConsoleError(message);
            else if (type === 'warn') originalConsoleWarn(message);
        }

        // Sobrescribir console methods
        console.log = function(...args) {
            addToLog(args.join(' '), 'log');
            originalConsoleLog.apply(console, args);
        };

        console.error = function(...args) {
            addToLog('‚ùå ' + args.join(' '), 'error');
            originalConsoleError.apply(console, args);
        };

        console.warn = function(...args) {
            addToLog('‚ö†Ô∏è ' + args.join(' '), 'warn');
            originalConsoleWarn.apply(console, args);
        };

        // Actualizar indicadores de estado
        function updateStatus(indicatorId, status) {
            const indicator = document.getElementById(indicatorId);
            indicator.className = 'status-indicator';

            if (status === 'success') indicator.classList.add('status-success');
            else if (status === 'error') indicator.classList.add('status-error');
            else if (status === 'warning') indicator.classList.add('status-warning');
            else indicator.classList.add('status-info');
        }

        // Funci√≥n para verificar el estado del Service Worker
        async function checkServiceWorker() {
            console.log('üîß Verificando Service Worker...');

            if (!('serviceWorker' in navigator)) {
                console.error('‚ùå Service Worker no soportado');
                updateStatus('sw-status', 'error');
                return false;
            }

            try {
                const registrations = await navigator.serviceWorker.getRegistrations();
                console.log('üìã Registros encontrados:', registrations.length);

                for (const reg of registrations) {
                    console.log('üîß SW registrado:', {
                        scope: reg.scope,
                        activo: !!reg.active,
                        instalando: !!reg.installing,
                        esperando: !!reg.waiting,
                        url: reg.active ? reg.active.scriptURL : 'N/A'
                    });
                }

                // Intentar registrar uno nuevo para verificar si funciona
                console.log('üîÑ Intentando registrar Service Worker de prueba...');
                try {
                    const testRegistration = await navigator.serviceWorker.register('/sw.js', { scope: '/' });
                    console.log('‚úÖ Registro de prueba exitoso:', testRegistration.scope);
                    updateStatus('sw-status', 'success');
                    return true;
                } catch (regError) {
                    console.error('‚ùå Error en registro de prueba:', regError);
                    console.error('üìã Tipo de error:', regError.name);
                    console.error('üí¨ Mensaje:', regError.message);

                    // Posibles causas del error
                    if (regError.name === 'SecurityError') {
                        console.error('üîí CAUSA: Error de seguridad - verifica HTTPS');
                    } else if (regError.name === 'NotAllowedError') {
                        console.error('üö´ CAUSA: Permiso denegado - navegador bloque√≥ el registro');
                    } else if (regError.name === 'AbortError') {
                        console.error('‚èπÔ∏è CAUSA: Registro abortado - posible conflicto con SW existente');
                    }

                    updateStatus('sw-status', 'error');
                    return false;
                }
            } catch (error) {
                console.error('‚ùå Error verificando SW:', error);
                updateStatus('sw-status', 'error');
                return false;
            }
        }

        // Funci√≥n para verificar permisos
        function checkPermissions() {
            console.log('üîî Verificando permisos...');

            if (!('Notification' in window)) {
                console.error('‚ùå Notificaciones no soportadas');
                updateStatus('permission-status', 'error');
                return false;
            }

            const permission = Notification.permission;
            console.log('üìã Estado del permiso:', permission);

            if (permission === 'granted') {
                updateStatus('permission-status', 'success');
                return true;
            } else if (permission === 'denied') {
                updateStatus('permission-status', 'error');
                return false;
            } else {
                updateStatus('permission-status', 'warning');
                return false;
            }
        }

        // Funci√≥n para verificar suscripciones push
        async function checkPushSubscription() {
            console.log('üì® Verificando suscripci√≥n push...');

            if (!('serviceWorker' in navigator)) {
                console.error('‚ùå Service Worker no disponible');
                updateStatus('subscription-status', 'error');
                return false;
            }

            try {
                const registrations = await navigator.serviceWorker.getRegistrations();

                if (registrations.length === 0) {
                    console.error('‚ùå No hay Service Workers registrados');
                    updateStatus('subscription-status', 'error');
                    return false;
                }

                const reg = registrations[0];
                const subscription = await reg.pushManager.getSubscription();

                if (subscription) {
                    console.log('‚úÖ Suscripci√≥n encontrada:', {
                        endpoint: subscription.endpoint.substring(0, 50) + '...',
                        expirationTime: subscription.expirationTime
                    });
                    updateStatus('subscription-status', 'success');
                    return true;
                } else {
                    console.log('‚ö†Ô∏è No hay suscripci√≥n push activa');
                    updateStatus('subscription-status', 'warning');
                    return false;
                }
            } catch (error) {
                console.error('‚ùå Error verificando suscripci√≥n:', error);
                updateStatus('subscription-status', 'error');
                return false;
            }
        }

        // Funci√≥n para verificar configuraci√≥n VAPID
        async function checkVapidConfig() {
            console.log('üîë Verificando configuraci√≥n VAPID...');

            try {
                const response = await fetch('/api/push/vapid-public-key');
                const vapidKey = await response.text();

                console.log('üìã Clave VAPID p√∫blica:', vapidKey ? '‚úÖ Configurada' : '‚ùå No configurada');
                console.log('üîó Longitud:', vapidKey.length);

                if (vapidKey.length > 0) {
                    updateStatus('vapid-status', 'success');
                    return true;
                } else {
                    updateStatus('vapid-status', 'error');
                    return false;
                }
            } catch (error) {
                console.error('‚ùå Error obteniendo clave VAPID:', error);
                updateStatus('vapid-status', 'error');
                return false;
            }
        }

        // Funci√≥n principal de diagn√≥stico
        async function diagnosePushNotifications() {
            console.log('üîç === DIAGN√ìSTICO COMPLETO ===');

            const results = {
                serviceWorker: await checkServiceWorker(),
                permissions: checkPermissions(),
                pushSubscription: await checkPushSubscription(),
                vapidConfig: await checkVapidConfig()
            };

            console.log('üìä Resultados del diagn√≥stico:');
            console.log('üîß Service Worker:', results.serviceWorker ? '‚úÖ OK' : '‚ùå FALL√ì');
            console.log('üîî Permisos:', results.permissions ? '‚úÖ OK' : '‚ùå FALL√ì');
            console.log('üì® Suscripci√≥n Push:', results.pushSubscription ? '‚úÖ OK' : '‚ùå FALL√ì');
            console.log('üîë VAPID:', results.vapidConfig ? '‚úÖ OK' : '‚ùå FALL√ì');

            const allOk = Object.values(results).every(result => result === true);

            if (allOk) {
                console.log('üéâ ¬°Todo parece estar configurado correctamente!');
                console.log('üí° Si a√∫n no llegan las notificaciones, prueba el env√≠o desde servidor');
            } else {
                console.log('‚ö†Ô∏è Hay problemas de configuraci√≥n. Revisa los resultados arriba.');
            }

            return results;
        }

        // Funci√≥n para probar el proceso completo paso a paso
        async function testStepByStep() {
            console.log('üî¨ === PRUEBA PASO A PASO ===');

            // Paso 1: Verificar soporte b√°sico
            console.log('üìã PASO 1: Verificando soporte b√°sico...');
            if (!('serviceWorker' in navigator)) {
                console.error('‚ùå Service Worker no soportado');
                return;
            }
            if (!('Notification' in window)) {
                console.error('‚ùå Notificaciones no soportadas');
                return;
            }
            if (!('PushManager' in window)) {
                console.error('‚ùå Push Manager no soportado');
                return;
            }
            console.log('‚úÖ Soporte b√°sico OK');

            // Paso 2: Verificar entorno seguro
            console.log('üîí PASO 2: Verificando entorno seguro...');
            const isSecure = window.location.protocol === 'https:' || window.location.hostname === 'localhost';
            console.log('üåê Protocolo:', window.location.protocol);
            console.log('üè† Hostname:', window.location.hostname);
            console.log('üîê Seguro:', isSecure);

            if (!isSecure) {
                console.warn('‚ö†Ô∏è Advertencia: No est√°s en HTTPS. Las notificaciones push requieren HTTPS en producci√≥n.');
            }

            // Paso 3: Verificar permisos actuales
            console.log('üîî PASO 3: Verificando permisos actuales...');
            const currentPermission = Notification.permission;
            console.log('üìã Permiso actual:', currentPermission);

            // Paso 4: Intentar registrar Service Worker
            console.log('üîß PASO 4: Intentando registrar Service Worker...');
            try {
                console.log('üìç URL del SW:', window.location.origin + '/sw.js');
                const registration = await navigator.serviceWorker.register('/sw.js', { scope: '/' });
                console.log('‚úÖ Service Worker registrado:', registration.scope);

                // Esperar a que se active
                console.log('‚è≥ Esperando activaci√≥n del Service Worker...');
                await navigator.serviceWorker.ready;
                console.log('‚úÖ Service Worker listo');

                // Paso 5: Solicitar permisos
                console.log('üìù PASO 5: Solicitando permisos de notificaci√≥n...');
                const permission = await Notification.requestPermission();
                console.log('üìã Permiso obtenido:', permission);

                // Verificar inmediatamente despu√©s
                const permissionAfter = Notification.permission;
                console.log('üîÑ Permiso despu√©s de solicitud:', permissionAfter);

                if (permissionAfter === 'denied') {
                    console.error('‚ùå EL NAVEGADOR CAMBI√ì EL PERMISO A DENIED AUTOM√ÅTICAMENTE');
                    console.error('üö® Esto indica un problema de seguridad o configuraci√≥n del navegador');

                    // Posibles soluciones
                    console.log('üí° POSIBLES SOLUCIONES:');
                    console.log('1. Verifica que est√©s en HTTPS (no HTTP)');
                    console.log('2. Limpia cookies y datos del sitio');
                    console.log('3. Reinicia el navegador');
                    console.log('4. Verifica que no haya extensiones bloqueando notificaciones');
                    console.log('5. Prueba en modo inc√≥gnito');

                    return { success: false, error: 'PERMISSION_AUTO_DENIED' };
                }

                if (permission === 'granted' || permissionAfter === 'granted') {
                    console.log('‚úÖ Permisos concedidos correctamente');

                    // Paso 6: Intentar crear suscripci√≥n push
                    console.log('üì® PASO 6: Intentando crear suscripci√≥n push...');
                    try {
                        // Obtener clave VAPID
                        const vapidResponse = await fetch('/api/push/vapid-public-key');
                        const vapidKey = await vapidResponse.text();

                        if (!vapidKey) {
                            console.error('‚ùå No se pudo obtener clave VAPID');
                            return { success: false, error: 'VAPID_MISSING' };
                        }

                        // Convertir clave
                        const convertedKey = urlBase64ToUint8Array(vapidKey);

                        // Crear suscripci√≥n
                        const subscription = await registration.pushManager.subscribe({
                            userVisibleOnly: true,
                            applicationServerKey: convertedKey
                        });

                        console.log('‚úÖ Suscripci√≥n push creada:', subscription.endpoint.substring(0, 50) + '...');

                        // Paso 7: Enviar al servidor
                        console.log('üì§ PASO 7: Enviando suscripci√≥n al servidor...');
                        const serverResponse = await fetch('/api/push/subscribe', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                subscription: subscription,
                                userId: 1, // Usuario de prueba
                                userType: 'cliente'
                            })
                        });

                        const serverResult = await serverResponse.json();
                        console.log('üìã Respuesta del servidor:', serverResult);

                        if (serverResult.success) {
                            console.log('üéâ ¬°TODO FUNCION√ì CORRECTAMENTE!');
                            return { success: true };
                        } else {
                            console.error('‚ùå Error del servidor:', serverResult.message);
                            return { success: false, error: 'SERVER_ERROR', details: serverResult };
                        }

                    } catch (subError) {
                        console.error('‚ùå Error creando suscripci√≥n:', subError);
                        return { success: false, error: 'SUBSCRIPTION_ERROR', details: subError.message };
                    }

                } else {
                    console.error('‚ùå Usuario deneg√≥ los permisos');
                    return { success: false, error: 'USER_DENIED' };
                }

            } catch (regError) {
                console.error('‚ùå Error registrando Service Worker:', regError);
                console.error('üìã Tipo de error:', regError.name);
                console.error('üí¨ Mensaje:', regError.message);

                // An√°lisis espec√≠fico del error
                if (regError.name === 'SecurityError') {
                    console.error('üîí CAUSA: Error de seguridad - El sitio debe estar en HTTPS');
                } else if (regError.name === 'NotAllowedError') {
                    console.error('üö´ CAUSA: Permiso denegado - El navegador bloque√≥ el registro');
                } else if (regError.name === 'AbortError') {
                    console.error('‚èπÔ∏è CAUSA: Registro abortado - Posible conflicto con SW existente');
                }

                return { success: false, error: 'REGISTRATION_FAILED', details: regError };
            }
        }

        // Funci√≥n auxiliar para convertir VAPID key
        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
                .replace(/-/g, '+')
                .replace(/_/g, '/');

            const rawData = window.atob(base64);
            const outputArray = new Uint8Array(rawData.length);

            for (let i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }

        // Funci√≥n para probar env√≠o desde el servidor
        async function testServerNotification(userId) {
            console.log('üì§ Probando env√≠o desde servidor...');

            if (!userId) {
                // Intentar obtener el userId de la p√°gina
                const userScript = document.querySelector('script[data-user]');
                if (userScript) {
                    try {
                        const userData = JSON.parse(userScript.textContent);
                        userId = userData.id;
                        console.log('üë§ UserId obtenido de la p√°gina:', userId);
                    } catch (e) {
                        console.error('‚ùå Error obteniendo userId de la p√°gina');
                    }
                }
            }

            if (!userId) {
                console.error('‚ùå No se pudo obtener userId. Proporciona uno manualmente: testServerNotification(123)');
                return;
            }

            try {
                const response = await fetch('/api/push/debug-send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        title: 'üß™ Prueba desde Debug',
                        body: `Test realizado a las ${new Date().toLocaleTimeString()}`,
                        url: '/dashboard/orders'
                    })
                });

                const result = await response.json();
                console.log('üìã Respuesta del servidor:', result);

                if (result.success) {
                    console.log('‚úÖ Notificaci√≥n enviada exitosamente');
                    console.log('‚è≥ Espera 5-10 segundos para que llegue la notificaci√≥n...');
                } else {
                    console.error('‚ùå Fall√≥ el env√≠o:', result.message);
                    if (result.debug) {
                        console.log('üîß Informaci√≥n de debug:', result.debug);
                    }
                }

                return result;
            } catch (error) {
                console.error('‚ùå Error en la petici√≥n:', error);
                return { success: false, error: error.message };
            }
        }

        // Funci√≥n para probar notificaci√≥n local
        function testLocalNotification() {
            console.log('üè† Probando notificaci√≥n local...');

            if (!('Notification' in window)) {
                console.error('‚ùå Notificaciones no soportadas');
                return;
            }

            if (Notification.permission !== 'granted') {
                console.error('‚ùå Permiso no concedido');
                return;
            }

            try {
                const notification = new Notification('üß™ Prueba Local', {
                    body: `Test local a las ${new Date().toLocaleTimeString()}`,
                    icon: '/images/logo-a-la-mesa.png',
                    badge: '/images/logo-a-la-mesa.png'
                });

                console.log('‚úÖ Notificaci√≥n local creada');

                // Cerrar autom√°ticamente despu√©s de 3 segundos
                setTimeout(() => {
                    notification.close();
                    console.log('üóëÔ∏è Notificaci√≥n local cerrada');
                }, 3000);

            } catch (error) {
                console.error('‚ùå Error creando notificaci√≥n local:', error);
            }
        }

        // Funci√≥n para verificar suscripciones en BD
        async function checkDatabaseSubscriptions(userId) {
            console.log('üóÑÔ∏è Verificando suscripciones en base de datos...');

            if (!userId) {
                // Intentar obtener el userId de la p√°gina
                const userScript = document.querySelector('script[data-user]');
                if (userScript) {
                    try {
                        const userData = JSON.parse(userScript.textContent);
                        userId = userData.id;
                        console.log('üë§ UserId obtenido de la p√°gina:', userId);
                    } catch (e) {
                        console.error('‚ùå Error obteniendo userId de la p√°gina');
                    }
                }
            }

            if (!userId) {
                console.error('‚ùå No se pudo obtener userId. Proporciona uno manualmente');
                return;
            }

            try {
                const response = await fetch(`/api/push/debug-user/${userId}`);
                const result = await response.json();

                console.log('üìã Estado del usuario en BD:', result);

                if (result.success) {
                    console.log('‚úÖ Usuario encontrado');
                    console.log('üìä Suscripciones activas:', result.subscriptionCount);
                    console.log('üîî Preferencia de notificaciones:', result.hasPushPreference ? 'Activada' : 'Desactivada');
                    console.log('üè™ Restaurantes:', result.restaurantCount);

                    if (result.subscriptions.length > 0) {
                        console.log('üìã Detalles de suscripciones:');
                        result.subscriptions.forEach((sub, index) => {
                            console.log(`  ${index + 1}. ID: ${sub.id}, Tipo: ${sub.tipo_usuario}, Fecha: ${sub.fecha_creacion}`);
                        });
                    }
                } else {
                    console.error('‚ùå Error consultando BD:', result.message);
                }

                return result;
            } catch (error) {
                console.error('‚ùå Error consultando BD:', error);
                return { success: false, error: error.message };
            }
        }

        // Event listeners para los botones
        document.getElementById('btn-step-by-step').addEventListener('click', async () => {
            console.log('\n' + '='.repeat(50));
            await testStepByStep();
            console.log('='.repeat(50) + '\n');
        });

        document.getElementById('btn-diagnose').addEventListener('click', async () => {
            console.log('\n' + '='.repeat(50));
            await diagnosePushNotifications();
            console.log('='.repeat(50) + '\n');
        });

        document.getElementById('btn-test-server').addEventListener('click', async () => {
            console.log('\n' + '='.repeat(50));
            await testServerNotification();
            console.log('='.repeat(50) + '\n');
        });

        document.getElementById('btn-test-local').addEventListener('click', () => {
            console.log('\n' + '='.repeat(50));
            testLocalNotification();
            console.log('='.repeat(50) + '\n');
        });

        document.getElementById('btn-check-db').addEventListener('click', async () => {
            console.log('\n' + '='.repeat(50));
            await checkDatabaseSubscriptions();
            console.log('='.repeat(50) + '\n');
        });

        document.getElementById('btn-clear-logs').addEventListener('click', () => {
            logOutput.textContent = 'üß™ === LOGS LIMPIADOS ===\n\n';
        });

        // Inicializar estados
        updateStatus('sw-status', 'warning');
        updateStatus('permission-status', 'warning');
        updateStatus('subscription-status', 'warning');
        updateStatus('vapid-status', 'warning');

        console.log('üõ†Ô∏è Debug de notificaciones push inicializado');
        console.log('üí° Haz clic en los botones para ejecutar las pruebas');
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</body>
</html>
