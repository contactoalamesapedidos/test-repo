a<link rel="stylesheet" href="/css/carousel-home.css">
<%- contentFor('body') %>



<!-- Slider Promocional General -->
<div id="restaurantPromoCarousel" class="carousel slide mb-5" data-bs-ride="carousel">
  <!-- Indicadores -->
  <div class="carousel-indicators">
    <button type="button" data-bs-target="#restaurantPromoCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
    <button type="button" data-bs-target="#restaurantPromoCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
    <button type="button" data-bs-target="#restaurantPromoCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
    <button type="button" data-bs-target="#restaurantPromoCarousel" data-bs-slide-to="3" aria-label="Slide 4"></button>
  </div>

  <div class="carousel-inner">
    <div class="carousel-item active">
      <img src="/images/slider1.jpeg" class="d-block w-100" alt="Slider 1" style="max-height:350px;object-fit:cover;">
      <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 rounded p-3">
        <h4 class="fw-bold">¡Bienvenido a A la Mesa!</h4>
        <p>Descubre los mejores restaurantes y platos de tu ciudad.</p>
      </div>
    </div>
    <div class="carousel-item">
      <img src="/images/slider2.jpeg" class="d-block w-100" alt="Slider 2" style="max-height:350px;object-fit:cover;">
      <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 rounded p-3">
        <h4 class="fw-bold">Variedad para todos los gustos</h4>
        <p>Pizzas, empanadas, hamburguesas, postres y mucho más.</p>
      </div>
    </div>
    <div class="carousel-item">
      <img src="/images/slider3.jpg" class="d-block w-100" alt="Slider 3" style="max-height:350px;object-fit:cover;">
      <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 rounded p-3">
        <h4 class="fw-bold">Delivery rápido y seguro</h4>
        <p>Recibe tu pedido en minutos, con la mejor atención.</p>
      </div>
    </div>
    <div class="carousel-item">
      <img src="/images/slider4.jpg" class="d-block w-100" alt="Slider 4" style="max-height:350px;object-fit:cover;">
      <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 rounded p-3">
        <h4 class="fw-bold">¿Tienes un restaurante?</h4>
        <p>Únete a nuestra plataforma y haz crecer tu negocio.</p>
      </div>
    </div>
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#restaurantPromoCarousel" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Anterior</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#restaurantPromoCarousel" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Siguiente</span>
  </button>
</div>

<!-- Banner de invitación a notificaciones push -->
<!-- ELIMINADO: Banner y botones de invitación a notificaciones push -->

<!-- Categorías Section -->
<section class="categories-section py-5">
    <div class="container">
        <div class="row align-items-center mb-4">
            <div class="col">
                <h2 class="text-center mb-0 fw-bold text-dark">
                    <i class="fas fa-th-large me-2 text-primary"></i>
                    Explora por Categorías
                </h2>
                <p class="text-center text-muted mt-2 mb-0">Descubre los mejores platos organizados por tipo</p>
            </div>
        </div>
        
        <!-- Contenedor del carrusel deslizable -->
        <div class="categories-carousel-container position-relative">
            <!-- Carrusel de categorías con scroll horizontal -->
            <div class="categories-scroll" id="categoriesScroll">
                <% if (categories && categories.length > 0) { %>
                    <% 
                    // Reordenar categorías: 'hamburguesas' antes de 'pastas' y 'otros' al final
                    const desiredOrder = ['pizzas','empanadas','sandwiches','hamburguesas','pastas'];
                    const normalize = s => (s||'').toString().toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').trim();
                    const priority = (name) => {
                        const n = normalize(name);
                        if (n === 'otros' || n === 'otro') return 9999; // enviar al final
                        const idx = desiredOrder.indexOf(n);
                        return idx === -1 ? 5000 : idx; // desconocidas al medio
                    };
                    const orderedCategories = categories.slice().sort((a,b) => {
                        const pa = priority(a.nombre);
                        const pb = priority(b.nombre);
                        if (pa !== pb) return pa - pb;
                        return normalize(a.nombre).localeCompare(normalize(b.nombre));
                    });
                    %>
                    <% orderedCategories.forEach(category => { %>
                        <div class="category-item">
                            <a href="/search?category=<%= encodeURIComponent(category.nombre) %>" class="category-link">
                                <div class="category-card">
                                    <div class="category-icon-wrapper">
                                        <img src="<%= locals.CategoryIcons.getCategoryImagePath(category.nombre) %>" alt="<%= category.nombre %> icon" class="category-icon-img">
                                        <div class="category-name text-center mt-2 fw-bold" style="color: #343a40 !important; display: block !important; visibility: visible !important; font-weight: 600 !important; font-size: inherit !important;"> <%= category.nombre %> </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-12 text-center">
                        <p class="text-muted">No hay categorías disponibles en este momento.</p>
                    </div>
                <% } %>
            </div>
        </div>
        

    </div>
</section>

<!-- Restaurantes Section -->
<section id="restaurants" class="py-5">
    <div class="container">
        <h2 class="text-center mb-4">Restaurantes Destacados</h2>
        <% if (topRatedRestaurants && topRatedRestaurants.length > 0) { %>
    <div class="row">
        <% let includeStyles = true; %>
        <% topRatedRestaurants.forEach(restaurant => { %>
            <%- include('partials/restaurant-card', { restaurant: restaurant, includeStyles: includeStyles }) %>
            <% includeStyles = false; %>
        <% }) %>
    </div>
<% } %>

        <!-- Botón Ver Más Restaurantes -->
        <div class="text-center mt-4">
            <a href="/search" class="btn btn-lg px-4 py-3 text-white fw-bold"
               style="background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%); border: none; box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);">
                <i class="fas fa-utensils me-2"></i>Ver Más Restaurantes
            </a>
        </div>
    </div>
</section>






<script>
// Sync location with search form
document.addEventListener('DOMContentLoaded', function() {
    const locationInput = document.getElementById('userLocation');
    const searchLocationInput = document.getElementById('searchLocation');
    const searchForm = document.querySelector('form[action="/search"]');
    
    // Sync location input with hidden field
    if (locationInput && searchLocationInput) {
        locationInput.addEventListener('input', function() {
            searchLocationInput.value = this.value;
        });
    }
    
    // Load saved location on page load
    const saved = localStorage.getItem('alamesa_location');
    if (saved && locationInput && !locationInput.value.trim()) {
        try {
            const locationData = JSON.parse(saved);
            const isOld = Date.now() - locationData.timestamp > 24 * 60 * 60 * 1000;
            
            if (!isOld) {
                locationInput.value = locationData.address;
                searchLocationInput.value = locationData.address;
                updateLocationDisplay(locationData.address);
            }
        } catch (error) {
            console.error('Error loading saved location:', error);
        }
    }
    
    // Update search location when form is submitted
    if (searchForm) {
        searchForm.addEventListener('submit', function() {
            if (locationInput && searchLocationInput) {
                searchLocationInput.value = locationInput.value;
            }
        });
    }
});

// Función para mejorar la experiencia de scroll
function enhanceScrollExperience() {
    const scroll = document.getElementById('categoriesScroll');
    if (!scroll) return;

    // Agregar indicador visual de scroll
    scroll.addEventListener('scroll', () => {
        const scrollLeft = scroll.scrollLeft;
        const maxScroll = scroll.scrollWidth - scroll.clientWidth;

        // Mostrar/ocultar indicadores de borde según la posición
        const container = scroll.parentElement;
        if (scrollLeft > 0) {
            container.classList.add('scrolled-left');
        } else {
            container.classList.remove('scrolled-left');
        }

        if (scrollLeft < maxScroll) {
            container.classList.add('scrolled-right');
        } else {
            container.classList.remove('scrolled-right');
        }
    });
}

// Función para controlar las flechas de navegación
function setupCategoryNavigation() {
    const container = document.querySelector('.categories-carousel-container');
    const scrollElement = document.getElementById('categoriesScroll');

    if (!container || !scrollElement) {
        console.warn('Category navigation elements not found');
        return;
    }

    // Crear flechas para desktop y móviles (pero ocultar en móviles con CSS)
    console.log('Window width:', window.innerWidth);
    console.log('Creating navigation arrows');

    // Limpiar flechas existentes si las hay
    const existingArrows = container.querySelectorAll('.category-nav-arrow');
    existingArrows.forEach(arrow => arrow.remove());

    // Flecha izquierda
    const leftArrow = document.createElement('div');
    leftArrow.className = 'category-nav-arrow category-nav-left';
    leftArrow.innerHTML = '‹';
    leftArrow.style.cursor = 'pointer';
    leftArrow.title = 'Desplazar a la izquierda';
    leftArrow.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('Left arrow clicked');
        if (scrollElement) {
            const currentScroll = scrollElement.scrollLeft;
            const scrollAmount = window.innerWidth <= 768 ? 200 : 300; // Menos en móviles
            scrollElement.scrollTo({
                left: Math.max(0, currentScroll - scrollAmount),
                behavior: 'smooth'
            });
        }
    });

    // Flecha derecha
    const rightArrow = document.createElement('div');
    rightArrow.className = 'category-nav-arrow category-nav-right';
    rightArrow.innerHTML = '›';
    rightArrow.style.cursor = 'pointer';
    rightArrow.title = 'Desplazar a la derecha';
    rightArrow.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('Right arrow clicked');
        if (scrollElement) {
            const currentScroll = scrollElement.scrollLeft;
            const scrollAmount = window.innerWidth <= 768 ? 200 : 300; // Menos en móviles
            const maxScroll = scrollElement.scrollWidth - scrollElement.clientWidth;
            scrollElement.scrollTo({
                left: Math.min(maxScroll, currentScroll + scrollAmount),
                behavior: 'smooth'
            });
        }
    });

    // Agregar flechas al contenedor
    container.appendChild(leftArrow);
    container.appendChild(rightArrow);

    // Mostrar/ocultar flechas según el scroll
    function updateArrows() {
        if (!scrollElement || !leftArrow || !rightArrow) return;

        const scrollLeft = scrollElement.scrollLeft;
        const maxScroll = scrollElement.scrollWidth - scrollElement.clientWidth;

        // Solo mostrar flechas si hay contenido para desplazar
        const hasOverflow = scrollElement.scrollWidth > scrollElement.clientWidth;

        if (hasOverflow) {
            leftArrow.style.display = window.innerWidth >= 769 ? 'flex' : 'none'; // Solo desktop
            rightArrow.style.display = window.innerWidth >= 769 ? 'flex' : 'none'; // Solo desktop

            if (window.innerWidth >= 769) {
                leftArrow.style.opacity = scrollLeft > 10 ? '1' : '0.3';
                rightArrow.style.opacity = scrollLeft < (maxScroll - 10) ? '1' : '0.3';
            }
        } else {
            leftArrow.style.display = 'none';
            rightArrow.style.display = 'none';
        }
    }

    // Actualizar flechas cuando cambie el tamaño de la ventana
    window.addEventListener('resize', updateArrows);

    scrollElement.addEventListener('scroll', updateArrows);
    updateArrows(); // Inicial

    // Mostrar flechas al hacer hover en el contenedor (solo desktop)
    if (window.innerWidth >= 769) {
        container.addEventListener('mouseenter', () => {
            if (leftArrow && rightArrow && leftArrow.style.display !== 'none') {
                leftArrow.style.opacity = '1';
                rightArrow.style.opacity = '1';
            }
        });

        container.addEventListener('mouseleave', () => {
            updateArrows(); // Volver al estado original
        });
    }

    console.log('Navigation arrows setup complete');
}

// Función para forzar la visibilidad del texto en móviles
function forceMobileTextVisibility() {
    console.log('Window width check:', window.innerWidth);
    if (window.innerWidth <= 768) {
        console.log('Forcing mobile text visibility - START');

        // Buscar todas las categorías
        const categoryItems = document.querySelectorAll('.category-item');
        console.log('Found category items:', categoryItems.length);

        categoryItems.forEach((item, index) => {
            const nameElement = item.querySelector('.category-name');
            if (nameElement) {
                console.log(`Category ${index}:`, nameElement.textContent);

                // Aplicar estilos agresivos
                nameElement.style.setProperty('display', 'block', 'important');
                nameElement.style.setProperty('visibility', 'visible', 'important');
                nameElement.style.setProperty('opacity', '1', 'important');
                nameElement.style.setProperty('color', '#343a40', 'important');
                nameElement.style.setProperty('font-size', '1rem', 'important');
                nameElement.style.setProperty('font-weight', '600', 'important');
                nameElement.style.setProperty('text-align', 'center', 'important');
                nameElement.style.setProperty('width', '100%', 'important');
                nameElement.style.setProperty('margin', '10px auto 0 auto', 'important');
                nameElement.style.setProperty('margin-top', '10px', 'important');
                nameElement.style.setProperty('position', 'relative', 'important');
                nameElement.style.setProperty('z-index', '100', 'important');
                nameElement.style.setProperty('height', 'auto', 'important');
                nameElement.style.setProperty('overflow', 'visible', 'important');
                nameElement.style.setProperty('white-space', 'normal', 'important');
                nameElement.style.setProperty('background', 'rgba(255,255,255,0.8)', 'important');
                nameElement.style.setProperty('padding', '2px 4px', 'important');
                nameElement.style.setProperty('border-radius', '3px', 'important');

                // Forzar que sea visible quitando clases problemáticas
                nameElement.classList.remove('d-none', 'd-md-none', 'd-lg-none', 'd-xl-none');
                nameElement.classList.add('d-block');

                console.log(`Forced visibility for category ${index}:`, nameElement.textContent);

                // Debug: Check computed styles
                const computedStyle = window.getComputedStyle(nameElement);

                // Also force parent visibility
                const parent = nameElement.parentElement;
                if (parent) {
                    parent.style.setProperty('overflow', 'visible', 'important');
                    parent.style.setProperty('display', 'block', 'important');
                    parent.style.setProperty('visibility', 'visible', 'important');
                }

                // Force grandparent visibility too
                const grandparent = parent ? parent.parentElement : null;
                if (grandparent) {
                    grandparent.style.setProperty('overflow', 'visible', 'important');
                    grandparent.style.setProperty('display', 'block', 'important');
                    grandparent.style.setProperty('visibility', 'visible', 'important');
                }
            } else {
                console.log(`No name element found for category ${index}`);
            }
        });

        console.log('Forcing mobile text visibility - END');
    } else {
        console.log('Not mobile, skipping text forcing');
    }
}

// Inicializar carrusel de categorías cuando se carga la página
document.addEventListener('DOMContentLoaded', function() {
    const scroll = document.getElementById('categoriesScroll');
    if (scroll) {
        // Mejorar experiencia de scroll
        enhanceScrollExperience();

        // Inicializar flechas de navegación
        setupCategoryNavigation();

        // Scroll horizontal con mouse/touch
        const categoriesScroll = document.getElementById('categoriesScroll');

        // --- DRAG & TOUCH SCROLL (REMOVED) ---

        // Cargar estadísticas de categorías
        loadCategoryStats();

        // Forzar visibilidad del texto en móviles después de un pequeño delay
        setTimeout(forceMobileTextVisibility, 100);
        setTimeout(forceMobileTextVisibility, 500);
        setTimeout(forceMobileTextVisibility, 1000);
    }

    // Inicializar event listeners del carrito móvil
    initializeMobileCartEvents();

    // Inicializar event listeners del menú de usuario móvil
    initializeMobileUserMenuEvents();

    // Ensure carousel is working
    const carousel = document.getElementById('restaurantPromoCarousel');
    if (carousel && typeof bootstrap !== 'undefined') {
        try {
            const bsCarousel = new bootstrap.Carousel(carousel, {
                interval: 5000,
                wrap: true,
                touch: true
            });
            console.log('Carousel initialized successfully');
        } catch (error) {
            console.error('Error initializing carousel:', error);
        }
    }
});

// Función para cargar estadísticas de categorías (deshabilitada por ahora)
function loadCategoryStats() {
    // Esta función está deshabilitada porque los elementos .count-number no existen en el HTML
    // const categoryItems = document.querySelectorAll('.category-item');

    // categoryItems.forEach((item, index) => {
    //     const categoryName = item.querySelector('.category-name').textContent;
    //     const countElement = item.querySelector('.count-number');

    //     if (countElement) {
    //         // Simular carga de datos (en una implementación real, esto sería una llamada a la API)
    //         setTimeout(() => {
    //             const randomCount = Math.floor(Math.random() * 15) + 3; // 3-17 restaurantes
    //             countElement.textContent = randomCount;

    //             // Animación de contador
    //             animateCounter(countElement, 0, randomCount, 1000);
    //         }, 500 + (index * 200));
    //     }
    // });
}

// Función para animar contadores
function animateCounter(element, start, end, duration) {
    if (!element) {
        console.warn('animateCounter: element is null or undefined');
        return;
    }

    const startTime = performance.now();

    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        const current = Math.floor(start + (end - start) * progress);
        if (element) {
            element.textContent = current;
        }

        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        }
    }

    requestAnimationFrame(updateCounter);
}

// Función para inicializar eventos del carrito móvil
function initializeMobileCartEvents() {
    // Event listener para el carrito móvil
    const mobileCartIcon = document.getElementById('cartIconContainerMobile');
    if (mobileCartIcon) {
        mobileCartIcon.addEventListener('click', function(e) {
            e.preventDefault();
            
            if (typeof window.toggleCartSidebar === 'function') {
                window.toggleCartSidebar(e);
            }
        });
    }
    
    // Event listener para el overlay del carrito
    const cartOverlay = document.getElementById('cartOverlay');
    if (cartOverlay) {
        cartOverlay.addEventListener('click', function(e) {
            if (e.target === cartOverlay) {
                if (typeof window.closeCartSidebar === 'function') {
                    window.closeCartSidebar();
                }
            }
        });
    }
}

// Función para inicializar eventos del menú de usuario móvil
function initializeMobileUserMenuEvents() {
    // Event listener para el menú de usuario móvil
    const mobileUserMenuButton = document.querySelector('.mobile-nav .user-menu-trigger');
    if (mobileUserMenuButton) {
        mobileUserMenuButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (typeof window.toggleUserMenu === 'function') {
                window.toggleUserMenu(e);
            }
        });
    }
    
    // Event listener para cerrar el menú de usuario con overlay
    const userMenuOverlay = document.getElementById('userMenuOverlay');
    if (userMenuOverlay) {
        // Remover event listeners previos
        const newOverlay = userMenuOverlay.cloneNode(true);
        userMenuOverlay.parentNode.replaceChild(newOverlay, userMenuOverlay);
        
        newOverlay.addEventListener('click', function(e) {
            if (e.target === newOverlay) {
                e.preventDefault();
                e.stopPropagation();
                
                if (typeof window.closeUserMenu === 'function') {
                    window.closeUserMenu();
                }
            }
        });
    }
    
    // Event listener para cerrar menús con Escape (solo una vez)
    document.removeEventListener('keydown', handleEscapeKey);
    document.addEventListener('keydown', handleEscapeKey);
    
    // Prevenir que otros scripts interfieran con el menú
    const userMenuSidebar = document.getElementById('userMenuSidebar');
    if (userMenuSidebar) {
        // Proteger el sidebar de modificaciones no deseadas
        const originalClassList = userMenuSidebar.classList;
        Object.defineProperty(userMenuSidebar, 'classList', {
            get: function() {
                return originalClassList;
            },
            set: function(value) {
                // Solo permitir cambios específicos
                if (typeof value === 'string' && (value.includes('show') || value.includes('hide'))) {
                    originalClassList.value = value;
                }
            }
        });
    }
}

// Función separada para manejar la tecla Escape
function handleEscapeKey(event) {
    if (event.key === 'Escape') {
        
        if (typeof window.closeCartSidebar === 'function') {
            window.closeCartSidebar();
        }
        if (typeof window.closeUserMenu === 'function') {
            window.closeUserMenu();
        }
    }
}
</script>
<script>
window.addEventListener('DOMContentLoaded', async function() {
  // Solo para clientes logueados
  const userScript = document.querySelector('script[data-user]');
  if (!userScript) return;
  // Inicializar servicio
  if (window.pushNotificationService) {
    await window.pushNotificationService.initialize();
    // Si ya está habilitado, no hacer nada
    if (window.pushNotificationService.isEnabled()) return;
    // Si no está habilitado y el permiso no es 'denied', solicitarlo automáticamente
    if (Notification.permission !== 'denied') {
      try {
        await window.enablePushNotifications();
        if (typeof window.showToast === 'function') {
          window.showToast('¡Notificaciones activadas exitosamente!', 'success');
        } else {
          alert('¡Notificaciones activadas exitosamente!');
        }
      } catch (e) {
        if (Notification.permission === 'denied') {
          if (typeof window.showToast === 'function') {
            window.showToast('Has denegado los permisos de notificaciones. Puedes activarlas desde la configuración del navegador.', 'error');
          } else {
            alert('Has denegado los permisos de notificaciones. Puedes activarlas desde la configuración del navegador.');
          }
        } else {
          if (typeof window.showToast === 'function') {
            window.showToast('No se pudieron activar las notificaciones.', 'error');
          } else {
            alert('No se pudieron activar las notificaciones.');
          }
        }
      }
    }
  }
});
</script>
